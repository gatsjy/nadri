<?xml version="1.0" encoding="UTF-8" ?>

<!DOCTYPE mapper
      PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
      "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="FriendMapper">

	<resultMap type="friend" id="friendSelectMap">
		<result property="friendNo" column="friend_no" jdbcType="INTEGER" />
		<result property="friendId" column="friend_id" jdbcType="VARCHAR" />
		<result property="userId" column="user_id" jdbcType="VARCHAR" />
		<result property="friendCode" column="friend_code" jdbcType="VARCHAR" />
		<result property="friendRequest" column="friend_request" jdbcType="VARCHAR" />
		<result property="userName" column="user_name" jdbcType="VARCHAR" />
	</resultMap>
	
	<!-- friendCode - 친구상태면 1, 아니면 0 -->	
	<!-- friendRequest - 친구 요청 상태면 'Y' 아니면 'N' -->	

	
	<!-- 회원의 친구목록 호출 -->
	<select id="listFriend" parameterType="string" resultMap="friendSelectMap">
		SELECT friend_no, friend_id, friend_code
       FROM friend
       WHERE user_id=#{value} AND friend_code='1' OR friend_request='Y'
        UNION ALL
      SELECT friend_no, user_id, friend_code
       FROM friend
       WHERE friend_id=#{value} AND friend_code='1' 
	</select>
	

	<!-- 친구 수락 -->
	<update id="acceptFriend" parameterType = "java.util.Map">
		<!-- UPDATE friend 
		<set>
			friend_code='1', friend_request='N'
		</set>
		WHERE user_id=#{user_id} -->
		INSERT INTO friend (user_id, friend_id, user_name, friend_code, friend_request)
		VALUES(#{userId}, #{friendId}, #{userName}, '1', 'N')
	</update>
	
	
	<!-- 친구 삭제 -->
	<delete id = "deleteFriend" parameterType = "friend">
		DELETE 
		FROM friend
		WHERE (user_id = #{userId} AND friend_id = #{friendId}) OR (user_id = #{friendId} AND friend_id = #{friendId})
	</delete>
	
	
	<!-- 친구 요청 -->
	<insert id = "addFriend" parameterType = "java.util.Map">
		INSERT INTO friend (user_id, friend_id, user_name, friend_code, friend_request)
		VALUES(#{userId}, #{friendId}, #{userName}, '0', 'Y')
	</insert>
	
	
	<!-- 친구 요청 취소 -->
	<delete id="cancelFriend" parameterType = "java.util.Map">
		DELETE FROM friend
		WHERE user_id = #{userId} AND friend_id = #{friendId}
	</delete>	


	<!-- 친구 요청 거절 -->
	<delete id = "refuseFriend" parameterType = "java.util.Map">
		DELETE FROM friend
		WHERE user_id = #{friendId} AND friend_id = #{userId}
	</delete>


	<!-- 친구 정보 조회 -->
	<select id = "getFriend" parameterType="string" resultMap="friendSelectMap">
		SELECT * FROM friend WHERE friend_id = #{friendId}
	</select>
	
	
	
	<!-- 하지수 테스트 -->
	<select id="listFriendFromBoard" parameterType="String" resultMap="friendSelectMap">
		SELECT friend_id
	    FROM friend
	    WHERE user_id=#{value} AND friend_code='1'
        UNION ALL
		SELECT user_id
	    FROM friend
	    WHERE friend_id=#{value} AND friend_code='1'
	</select>
	
	<!--  친구 여부 확인 -->
	<select id="checkFriend" parameterType="map" resultType="int">
	     SELECT count(*)
	     FROM ( SELECT count(*) isFriend
	            FROM friend
	            WHERE user_id=#{userId} AND friend_id=#{friendId}
	              UNION ALL
	              SELECT count(*) isFriend
	            FROM friend
	            WHERE friend_id=#{userId} AND user_id=#{friendId} ) checkFriend
	     WHERE checkFriend.isFriend not in ('0');
	</select>

</mapper>
