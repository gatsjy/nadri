<?xml version="1.0" encoding="UTF-8" ?>

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="BoardMapper">
	
	<resultMap type="board" id="boardMap">
		<result property="boardNo" column="board_no" jdbcType="INTEGER"/>
		<result property="boardDate" column="board_time" jdbcType="DATE"/>
		<result property="boardTitle" column="board_title" jdbcType="VARCHAR"/>
		<result property="boardContent" column="board_content" jdbcType="VARCHAR"/>
		<result property="openRange" column="open_range" jdbcType="VARCHAR"/>
		<result property="boardImg" column="board_img" jdbcType="VARCHAR"/>
		<result property="hashTag" column="hashtag" jdbcType="VARCHAR"/>
		<result property="likeCnt" column="likeCnt" jdbcType="INTEGER"/>
		<result property="commCnt" column="commCnt" jdbcType="INTEGER"/>
		
		<association property="user" javaType="user">
			<id property="userId" column="user_id" jdbcType="VARCHAR"/>
		</association>
	</resultMap>
	
	<!-- Board -->
	<insert id="insertBoard" parameterType="board">
		INSERT
		INTO BOARD (user_id, board_time, board_title, board_content, board_img, open_range, hashtag)
		VALUES (#{user.userId}, NOW(), #{boardTitle}, #{boardContent}, #{boardImg}, #{openRange}, #{hashTag});
	</insert>
	
	<update id="updateBoard" parameterType="board">
		UPDATE BOARD
		SET board_title=#{boardTitle}, board_content=#{boardContent}, board_img=#{boardImg}, open_range=#{openRange}, hashtag=#{hashTag}
		WHERE board_no=#{boardNo}
	</update>
	
	<select id="getBoard" parameterType="int" resultMap="boardMap">
        SELECT board.*, comment.commCnt, likes.likeCnt
        FROM board
			LEFT JOIN (SELECT board_no, count(*) commCnt FROM comment GROUP BY board_no) comment on board.board_no = comment.board_no
            LEFT JOIN (SELECT board_no, count(*) likeCnt FROM likes GROUP BY board_no) likes on board.board_no = likes.board_no
        WHERE board.board_no = #{value}
	</select>
	
	<select id="getBoardList" parameterType="search" resultMap="boardMap">
        SELECT board.*, comment.commCnt, likes.likeCnt
        FROM board
			LEFT JOIN (SELECT board_no, count(*) commCnt FROM comment GROUP BY board_no) comment on board.board_no = comment.board_no
            LEFT JOIN (SELECT board_no, count(*) likeCnt FROM likes GROUP BY board_no) likes on board.board_no = likes.board_no
		<if test="memberFlag==0">
			HAVING board.open_range=0
		</if>
		ORDER BY board.board_time desc
		LIMIT #{startRowNum},#{pageSize};
	</select>
	
	<delete id="deleteBoard" parameterType="int">
		DELETE
		FROM BOARD
		WHERE board_no = #{value}
	</delete>
	
	<!-- 마이페이지 작성한 글 보기 -->
	<select id="getMyBoardList" parameterType="String" resultMap="boardMap">
        SELECT board.*, comment.commCnt, likes.likeCnt
        FROM board
			LEFT JOIN (SELECT board_no, count(*) commCnt FROM comment GROUP BY board_no) comment on board.board_no = comment.board_no
            LEFT JOIN (SELECT board_no, count(*) likeCnt FROM likes GROUP BY board_no) likes on board.board_no = likes.board_no
		WHERE board.user_id = #{value}
	</select>
	
	<!-- 메인화면 추천 게시물 -->
	<select id="getRecomBoard" parameterType="search" resultMap="boardMap">
        SELECT board.*, likes.likeCnt
        FROM board join ( SELECT board_no, COUNT(*) likeCnt
							FROM likes <if test="searchCondition.equals('최신')">
												WHERE likes_time > date_sub(NOW(), interval 1 day)
											</if>
											<if test="searchCondition.equals('일간')">
												BETWEEN date_add(NOW(), interval -1 day)
											</if>
											<if test="searchCondition.equals('주간')">
												BETWEEN date_add(NOW(), interval -1 week)
											</if>
											<if test="searchCondition.equals('월간')">
												BETWEEN date_add(NOW(), interval -1 month)
											</if>
											group by board_no ) likes
        ON board.board_no = likes.board_no
        GROUP BY board.board_no
        ORDER BY likes.likeCnt desc;
	</select>
	
	
	<!-- Likes --> <!-- Rest에서 좋아요시 변경된 개수 리턴할 때 사용 -->
	<select id="getLikeCount" resultType="int">
		SELECT
		COUNT(*)
		FROM LIKES
		WHERE board_no=#{value}
	</select>
	
	<select id="getLikeFlag" parameterType="map" resultType="int">
		SELECT
		COUNT(*)
		FROM LIKES
		WHERE board_no=#{boardNo} AND user_id=#{userId}
	</select>
	
	<insert id="insertLike" parameterType="map">
		INSERT
		INTO LIKES (board_no, user_id, likes_time)
		VALUES (#{boardNo}, #{userId}, NOW())
	</insert>
	
	<delete id="deleteLike" parameterType="map">
		DELETE
		FROM LIKES
		WHERE board_no=#{boardNo} AND user_id=#{userId}
	</delete>
</mapper>